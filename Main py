from kivymd.app import MDApp
from kivy.uix.screenmanager import ScreenManager, Screen, FadeTransition
from kivy.core.window import Window
from kivy.clock import Clock
from kivy.utils import platform

# Android fingerprint imports
if platform == 'android':
    from jnius import autoclass
    from android.permissions import request_permissions, Permission
    FingerprintCallback = autoclass('org.kivy.android.FingerprintCallback')

Window.clearcolor = (0.05, 0.05, 0.05, 1)
Window.size = (400, 900)

class SplashScreen(Screen):
    def on_enter(self):
        Clock.schedule_once(self.switch_to_login, 2)

    def switch_to_login(self, dt):
        self.manager.current = 'login'

class LoginScreen(Screen):
    def on_enter(self):
        if platform == 'android':
            request_permissions([Permission.USE_BIOMETRIC])
            try:
                fp = FingerprintCallback()
                fp.startListening()
            except Exception as e:
                print("Fingerprint error:", e)
                self.manager.current = 'analyzer'
        else:
            self.manager.current = 'analyzer'

class AnalyzerScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        from main_quantum_analyzer import QuantumAnalyzer
        self.add_widget(QuantumAnalyzer())

class QuantumApp(MDApp):
    def build(self):
        sm = ScreenManager(transition=FadeTransition())
        sm.add_widget(SplashScreen(name='splash'))
        sm.add_widget(LoginScreen(name='login'))
        sm.add_widget(AnalyzerScreen(name='analyzer'))
        return sm

if __name__ == '__main__':
    QuantumApp().run()
